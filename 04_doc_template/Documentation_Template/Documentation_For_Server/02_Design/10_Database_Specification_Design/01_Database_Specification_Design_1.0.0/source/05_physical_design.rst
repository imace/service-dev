.. 以两个点开始的内容是注释。不会出现编写的文档中。但是能体现文档书写者的思路。
.. 文档中的示例用*XXX*修饰，以斜体的方式显示，实际使用时可以在示例前一行的空白行开头添加..，以将其注释。
.. 一般一个文件，内容，逻辑的分层，分到三级就可以， 最多四级. 也就是
   H1. ########
   H2, ********
   H3, =========
   H4. ---------

物理设计
###################################################

  *提示：*

  *（1）主要是设计表结构。一般地，实体对应于表，实体的属性对应于表的列，实体之间的关系成为表的约束。逻辑设计中的实体大部分可以转换成物理设计中的表，但是它们并不一定是一一对应的。*

  *（2）对表结构进行规范化处理（第三范式）。*



基表设计[数据库名]
*************************

表汇总
=========

========  ==========  
表名      功能说明    
========  ==========  
表A       
表B       
表C       
========  ==========  

[XXX表][表名]
=================

表结构
------------

  *允许为空：不填的表示为“是”。*

  *唯一：不填的表示为“是”。*

  *表字段的区别度：主要是考虑到将来在此字段上建立索引类型选择时作为参考,当字段值唯一时可以不考虑,当字段值不唯一时,估算一个区别度,近似即可。例如：如果一个表的NAME字段有共2000个值,其中有1999个不同值,1999/2000=0.99 越接近1区别度越高,反之区别度越低。*


==================================  ============  ======================  =============  =========  ============  ========  =============  ======================  
序号                                字段名称      数据类型（精度范围）    允许为空Y/N    唯一Y/N    区别度        默认值    约束条件       说明                       
==================================  ============  ======================  =============  =========  ============  ========  =============  ======================  
此表格的序号，与数据库的序号无关    [字段名称]    [数据类型]              [Y/N]          [Y/N]      [高/中/低]              [主键/外键]    字段含义，相关说明等    
                                        
==================================  ============  ======================  =============  =========  ============  ========  =============  ======================  


主键
------------

  *主键：是能够唯一标识表中某一行的属性或属性组，一个表只能有一个主键，主键列不允许空值。*
  
  *此处对主键进行描述说明。*


其他排序字段
--------------

  *排序字段：即对表中查询的数据进行排序的属性字段。*
  
  *对排序字段进行描述说明，排序字段需要根据具体的业务需求来确定。可用于性能优化。*
  

索引字段
------------

  *表的索引: 索引是一种特殊的文件，它们包含着对数据表里所有记录的引用指针，索引可以提高查询的速度，一个表可以有多个候选索引。同时索引也会降低插入更新的速度，因此在高插入更新频率的情况下，索引需权衡采用*
  
  *此处对索引进行描述说明，索引是否建立要根据具体的业务需求来确定。可用于性能优化。*


Sql脚本（根据实际情况决定是否需要此数据）
------------------------------------------

  *可用于数据库表的创建和升级。*

  
    参考脚本格式如下::

	CREATE TABLE [XXX表名]
	(
	[字段名称] [数据类型] [NOT NULL /NULL]
	, [字段名称] [数据类型] [NOT NULL /NULL] 
	, [字段名称] [数据类型] [NOT NULL /NULL] 
	, [字段名称] [数据类型] [NOT NULL /NULL]
	, CONSTRAINT PK_[XXX表名]_[XXX表字段] PRIMARY KEY ([字段名称])
	) type = INNODB;
	ALTER TABLE [XXX表名] ADD CONSTRAINT FK_[XXX表名]_[YYY表名]_[XXX表字段]
	FOREIGN KEY ([字段名称]) REFERENCES [YYY表名] ([字段名称])
	CREATE INDEX [索引名] ON [XXX表名] ([字段名称])


记录数
------------

  *表的记录数：表能容纳的记录总数要求，根据具体的业务需求确定。*
  
  *此指标可指导性能设计*


增长量
------------

  *表的增长量：表单位时间记录的增长量要求，根据具体的业务需求确定。增长量应确定单位时间，如果量大可以按每天,如果不大可以按每月。*
  
  *此指标可指导性能设计*


表的并发
------------

  *表的并发：表的并发访问程度，即表的单位时间的负载要求，根据具体的业务需求预测表的并发。*
  
  *此指标可指导性能设计*


补充说明
------------



视图的设计
***************

  *根据XXX产品的概要设计文档来确定。*

  *视图的命名按照《xx数据库设计规范》中关于视图的命名规范命名。*

  *视图的设计应注意以下几点:*


  *1 尽量减少列中使用的公式。*

  *2 去掉所有不必要的列。*

  *3 不要使同一个文档属于多个分类。*

  *4 避免使用表单公式。*



存储过程、函数的设计
***********************************

  *存储过程的命名按照《xx数据库设计规范》中关于存储过程的命名规范命名。*

  *存储过程：根据具体得业务逻辑确定输入参数个数，类型,确定对哪几个表进行何种作。在定义存储过程时，要使用其完成单一、相对集中的任务，不要定义已由其他提供功能的过程。例如：不要定义强制数据完整性的过程（使用完整性约束）。*
         
  *函数    ：函数与存储过程非常相似，它也是存储在数据库中的对象。但是可以在SQL命令中使用函数。就好像建立自己的substr函数一样*



触发器的设计（需要权衡各方面因素，如数据库性能，维护，迁移等，慎重使用）
**************************************************************************

  *触发器的命名按照《xx数据库设计规范》中关于触发器的命名规范命名。*

  *触发器  ：触发器是存储在数据库中的程序，它在某一特定事件发生时执行。这些程序可以用PL/SQL和java语言编写，也可以用作c语言的调用，数据库允许用户定义这些程序，然后在相关的表，视图或者数据库动作执行insert，update或delete语句时执行。*
  
  


