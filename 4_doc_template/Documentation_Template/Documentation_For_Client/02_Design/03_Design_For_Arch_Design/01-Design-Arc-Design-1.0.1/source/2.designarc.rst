系统架构设计详解
#########################

架构设计策略
*********************

 *主要是一些架构中用的的技术优点， 下面只是一个用例， 在自己写的时候可以删除*

#. 核心架构技术
	* MVC三层架构，基于Android的Activity+Layout.
#. 重用设计
	* 重用手机端实现的数据缓存，网路访问，数据异步加载机制
#. 维护性设计
	* 在手机端的实现中加入单独的包实现代码与逻辑的隔离
#. 界面转换方案设计
	* 是有Tab＋ViewPage+Fragment 实现tab界面的跳转及数据更新。

架构设计图解
*******************

*主要是一些架构设计中用要的一些UML图， 如果没有相关视图可以删除标题， 下面每个视图下面都有说明。*

用例视图
================== 

*UML语言中的用例视图描述系统应具备的功能，也就是被成为参与者的外部用户所能观察到的功能。用例是系统的一个功能单元，可以被描述为参与者与系统之间的一次交互作用。参与者可以是一个用户或者另外一个系统。客户对系统要求的功能被当作多个用例在用例视图中进行描述，一个用例就是对系统的一个用法的通用描述。用例模型的用途就是列出系统中的用例和参与者，并显示哪个参与者参与了哪个用例的执行。用例视图是其他视图的核心，它的内容直接驱动其他视图的开发。*

逻辑视图
==================

*逻辑视图描述用例视图中提出的系统功能的实现。与用例视图相比，逻辑视图主要关注系统内部，它既描述系统的静态结构（类、对象以及他们之间的关系），也描述系统内部的动态协作关系。系统的静态结构在类图和对象图中进行描述，而动态模型则在状态图、时序图、协作图以及活动图中进行描述。逻辑视图的使用者主要是设计人员和开发人员。*

并发视图
==================

*UML语言中的并发视图主要考虑资源的有效利用、代码的并行执行以及系统环境中异步事件的处理。除了将系统划分为并发执行的控制以外，并发视图还需要处理线程之间的通信和同步。并发视图的使用者是开发人员和系统集成人员。并发视图由状态图、协作图、以及活动图组成。*

组件视图
==================

*组件是不同类型的代码模块，它是构造应用的软件单元。组件视图描述系统的实现模块以及它们之间的依赖关系。组件视图中也可以添加组件的其他附加信息，例如资源分配或者其他管理信息。组件视图主要由组件图构成，它的使用者主要是开发人员。*

配置视图
==================

*配置视图显示系统的物理部署，它描述位于节点上的运行实例的部署情况。配置视图主要由配置图表示，它的使用者是开发人员、系统集成人员和测试人员。配置视图还允许评估分配结果和资源分配。*
